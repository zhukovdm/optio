parser.py ______________________________________________________________________

class _Option:
    def is_single_short_view(cls, view: str) -> bool
    def is_single_long_view(cls, view: str) -> bool
    def __verify_views(self) -> None
    def __verify_acceptor(self) -> None
    def __verify_count(self) -> None
    def __verify_required(self) -> None
    def __verify_infos(self)
    def __init__(self, v: set[str] = {}, a: function = lambda id: id, c: tuple[int | None, int | None] = (1, None), r: bool = True, s: str = '', l: str = '') -> _Option
    def __str__(self) -> str
    def views(self) -> set[str]
    def has(self, view: str) -> bool
    def value(self) -> any
    def short_info(self) -> str
    def long_info(self) -> str
    def is_flag(self) -> bool
    def is_required(self) -> bool
    def is_found(self) -> bool
    def gather(self, args: deque) -> _Option
    def check(self) -> _Option
    def accept(self) -> _Option
    def reset(self) -> _Option

class OptioParser:
    def __init__(self) -> OptioParser
    def __str__(self) -> str
    def options(self) -> list[_Option]
    def plain_args(self) -> list[str]
    def add_option(self, views: set[str] = {}, acceptor: function = lambda id: id, count: tuple[int | None, int | None] = (1, None), required: bool = True, short_info: str = '', long_info: str = '') -> OptioParser
    def try_get_option(self, view: str) -> _Option | None
    def __get_option(self, view) -> _Option
    def __gather(self, args: list[str]) -> OptioParser
    def __check(self) -> OptioParser
    def __accept(self) -> OptioParser
    def parse(self, args: list[str] | str, conflicts: list[set[str]] = []) -> OptioParser
